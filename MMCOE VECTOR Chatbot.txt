<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MMCOE Vector - Direct API Chatbot</title>
    
<script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap" rel="stylesheet">
    
<script src="https://unpkg.com/lucide@latest"></script> 
    <style>
        
        /* Custom Styles for the 'MMCOE Vector' theme - ORIGINAL VERSION */
        
        /* New styles for the initial decompilation animation */
        #intro-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 1000;
            background-color: black;
        }
        
        /* Ensure main content is full screen when revealed */
        #main-content {
            height: 100vh;
            width: 100vw;
            position: relative; 
            opacity: 0; /* Starts hidden and fades in */
        }


        /* Light Mode Variables (Default) */
        :root {
            --primary-color: #6C0000; /* Dark Maroon */
            --primary-light: #C5221F;
            --highlight-color: #9A1C19; 
            
            --background-page: #f3f4f6; 
            --background-panel: white;
            --text-color: #1f2937;
            
            --chat-bg: white;
            --user-bg: #fcebeb;
            --bot-bg: var(--primary-light);
            
            --footer-bg: white;
            --input-bg: #f9fafb;
            --input-border: #e5e7eb;
        }

        /* Dark Mode Overrides */
        .dark-mode {
            --primary-color: #FF7043; 
            --primary-light: #E53935; 
            --highlight-color: #C5221F;
            
            --background-page: #121212; 
            --background-panel: #1e1e1e;
            --text-color: #e0e0e0;
            
            --chat-bg: #1e1e1e;
            --user-bg: #333333;
            --bot-bg: var(--primary-light);
            
            --footer-bg: #2d2d2d;
            --input-bg: #444444;
            --input-border: #555555;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-page);
            color: var(--text-color);
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        /* Main two-column container */
        #app-container {
            display: flex;
            height: 100vh;
            max-width: 1280px; 
            margin: 0 auto;
            padding: 24px; 
        }
        
        /* Sidebar and Chat Panel Polish */
        .polished-panel {
            border: 1px solid var(--input-border);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); 
            background-color: var(--background-panel);
            transition: box-shadow 0.3s ease, background-color 0.3s ease, border-color 0.3s ease;
        }
        
        .dark-mode h1, .dark-mode h2, .dark-mode .text-gray-700, .dark-mode .text-gray-900 {
            color: var(--text-color) !important;
        }

        /* Chat container for scrolling */
        .chat-container {
            height: calc(100vh - 14rem); 
            overflow-y: auto;
            background-color: var(--chat-bg);
            padding: 1.5rem;
            transition: background-color 0.3s ease;
        }
        
        /* Custom scrollbar for a sleek look */
        .chat-container::-webkit-scrollbar-thumb {
            background-color: #777;
        }
        .dark-mode .chat-container::-webkit-scrollbar-thumb {
            background-color: #444;
        }
        
        /* User message bubble */
        .user-message {
            background-color: var(--user-bg);
            color: var(--text-color);
            border-radius: 1.25rem 1.25rem 0.5rem 1.25rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08); 
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        /* Bot message bubble */
        .bot-message {
            background-color: var(--bot-bg);
            color: white;
            border-radius: 1.25rem 1.25rem 1.25rem 0.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
            transition: background-color 0.3s ease;
        }

        .bot-message a {
            color: #ffcdd2;
            text-decoration: underline;
        }
        
        /* Markdown generated styles */
        .bot-message h1, .bot-message h2, .bot-message h3, .bot-message h4 {
            font-weight: bold;
            margin-top: 10px;
        }
        .bot-message ul, .bot-message ol {
            padding-left: 20px;
            list-style-type: disc;
        }
        .bot-message table {
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .bot-message th, .bot-message td {
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 10px;
            text-align: left;
        }
        .bot-message th {
            background-color: rgba(0, 0, 0, 0.15);
            font-weight: 700;
        }
        .bot-message tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.05);
        }
        
        /* Translation area specific styling */
        .translation-content h1, .translation-content h2, 
        .translation-content h3, .translation-content h4 {
            color: #ffcdd2; /* Lighter color for headers in the translation box */
        }
        .translation-content ul, .translation-content ol {
             color: #ffcdd2;
        }
        

        /* Source tags inside bot message (Improved from last version for clarity) */
        .source-tag {
            background-color: rgba(0, 0, 0, 0.2); 
            color: #fff;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            line-height: 1;
            margin-right: 5px;
            margin-bottom: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .source-tag:hover {
            background-color: rgba(0, 0, 0, 0.3);
        }

        /* Quick Reply Buttons: Softer, filled buttons */
        .quick-reply-button {
            border: 1px solid var(--input-border);
            color: var(--text-color);
            background-color: var(--input-bg);
            transition: all 0.2s;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        .quick-reply-button:hover {
            background-color: var(--primary-light);
            color: white;
            border-color: var(--primary-light);
        }

        /* Footer and Input Field Styling */
        #app-footer {
            background-color: var(--footer-bg);
            border-color: var(--input-border);
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }
        .app-input {
            background-color: var(--input-bg);
            color: var(--text-color);
            border-color: var(--input-border);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); 
            transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
        }
        .app-input:focus {
             border-color: var(--highlight-color);
             box-shadow: 0 0 0 4px rgba(var(--highlight-color), 0.1);
        }
        
        /* Voice Mic Pulsing Effect */
        .mic-listening {
            animation: pulse 1.5s infinite;
            background-color: #ef4444 !important; /* Tailwind red-500 */
            color: white !important;
        }
        
        /* TTS button styling */
        .tts-button {
            background-color: rgba(255, 255, 255, 0.1);
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            transition: background-color 0.2s;
        }
        .tts-button:hover:not(:disabled) {
            background-color: rgba(255, 255, 255, 0.2);
        }
        .tts-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        @keyframes pulse {
          0%, 100% {
            opacity: 1;
          }
          50% {
            opacity: 0.5;
          }
        }
    </style>
</head>

<body class="antialiased">
    <!-- 1. Fullscreen Canvas for Decompilation Intro -->
    <canvas id="intro-canvas"></canvas>

    <!-- 2. Main Content Wrapper, hidden until intro finishes -->
    <div id="main-content" class="hidden h-full w-full"> 
        
        <div id="app-container" class="space-x-5">
            
            
<aside class="w-1/4 min-w-[240px] h-full rounded-xl polished-panel flex flex-col p-6 shadow-xl">
                <h1 class="text-3xl font-extrabold text-[var(--primary-color)] pb-3 mb-4 border-b-2 border-gray-100 dark:border-gray-700">
                    MMCOE <span class="block text-xl font-semibold text-gray-700">Vector AI</span>
                </h1>

                <!-- Adjusted from space-y-6 to space-y-4 for compactness -->
                <div class="space-y-4">
                    <h2 class="text-xl font-bold text-gray-700">AI Capabilities</h2>
                    
                    
                    

                    <!-- Reduced vertical spacing here to accommodate the date tracker -->
<div class="space-y-2 text-sm text-gray-600 mt-2">
                        
                        
                        <!-- Adjusted padding from p-3 to py-2 px-3 -->
<div id="voice-query-div" class="flex items-start space-x-3 py-2 px-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 cursor-pointer transition duration-150" onclick="document.getElementById('mic-button').click()">
                            <i data-lucide="mic" class="w-5 h-5 text-red-700 dark:text-red-400 mt-1 flex-shrink-0"></i>
                            <div>
                                <p class="font-medium text-gray-900">Voice Query (STT)</p>
                                <p class="text-xs text-gray-500">Hands-free input for questions</p>
                            </div>
                        </div>
                        
                        
                        <!-- Adjusted padding from p-3 to py-2 px-3 -->
<div class="flex items-start space-x-3 py-2 px-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 cursor-pointer transition duration-150">
                            <i data-lucide="shield" class="w-5 h-5 text-red-700 dark:text-red-400 mt-1 flex-shrink-0"></i>
                            <div>
                                <p class="font-medium text-gray-900">Real-time Derogatory Language Detection</p>
                                <p class="text-xs text-gray-500">Ensuring a safe and polite academic environment. 🚫</p>
                            </div>
                        </div>
                        
                        
                        <!-- Adjusted padding from p-3 to py-2 px-3 -->
<div class="flex items-start space-x-3 py-2 px-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 cursor-pointer transition duration-150">
                            <i data-lucide="volume-2" class="w-5 h-5 text-red-700 dark:text-red-400 mt-1 flex-shrink-0" id="audio-readback-icon"></i>
                            <div>
                                <p class="font-medium text-gray-900" id="audio-readback-status">Multi-Language Audio (TTS)</p>
                                <p class="text-xs text-gray-500">English, Hindi, Marathi playback</p>
                            </div>
                        </div>

                        
                        <!-- Adjusted padding from p-3 to py-2 px-3 -->
<div class="flex items-start space-x-3 py-2 px-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 cursor-pointer transition duration-150">
                            <i data-lucide="table" class="w-5 h-5 text-red-700 dark:text-red-400 mt-1 flex-shrink-0"></i>
                            <div>
                                <p class="font-medium text-gray-900">Structured Tables</p>
                                <p class="text-xs text-gray-500">Clean tables for courses/fees</p>
                            </div>
                        </div>
                        
                        
                        <!-- Adjusted padding from p-3 to py-2 px-3 -->
<div class="flex items-start space-x-3 py-2 px-3 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 cursor-pointer transition duration-150">
                            <i data-lucide="languages" class="w-5 h-5 text-red-700 dark:text-red-400 mt-1 flex-shrink-0"></i>
                            <div>
                                <p class="font-medium text-gray-900">Translate to Hindi/Marathi</p>
                                <p class="text-xs text-gray-500">Instant visual translation of responses</p>
                            </div>
                        </div>

                        

</div>
                </div>

                <!-- Date and Day Tracker Element (Adjusted for smaller size: p-4 -> p-3, text-3xl -> text-2xl, and text-xs -> text-[10px]) -->
                <div id="date-day-tracker" class="mt-4 p-3 rounded-xl text-center shadow-2xl transition duration-300 border-b-4 border-white/50" 
                     style="background-color: var(--primary-light); color: white;">
                    <p class="text-[10px] font-semibold opacity-90 mb-1 tracking-wider uppercase">CURRENT SESSION DATE</p>
                    <p id="current-day" class="text-2xl font-extrabold tracking-wider"></p>
                    <p id="current-date" class="text-sm font-medium opacity-80 mt-1"></p>
                </div>
            </aside>

            
<section class="flex-grow flex flex-col h-full rounded-xl polished-panel overflow-hidden shadow-xl">
                
                
<header class="bg-[var(--primary-color)] p-4 shadow-lg sticky top-0 z-10 rounded-t-xl">
                    <h2 class="text-2xl font-extrabold text-white text-center tracking-wide">MMCOE Vector Chat</h2>
                </header>

                
<div id="chat-box" class="chat-container flex-grow space-y-4">
                    

<div class="flex justify-start">
                        <div class="bot-message p-4 max-w-sm md:max-w-md shadow-lg transition duration-300">
                            <p class="font-semibold mb-1">Hello! 👋 Welcome to your Educational Assistant Bot.</p>
                            <p>I'm ready to help you with your queries. How can I assist you today? 🎓</p>
                        
                            
                            
<div class="mt-3 pt-2 border-t border-white/30 space-y-2">
                                <div id="tts-buttons-msg-initial" class="flex flex-wrap gap-2 justify-start text-xs font-medium">
                                    <button class="tts-button text-xs text-white/70 hover:text-white transition duration-150 flex items-center" data-message-id="msg-initial" onclick="handleMultiLanguageTTS('en', this)">
                                        <i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Play (EN)
                                    </button>
                                    <button class="tts-button text-xs text-white/70 hover:text-white transition duration-150 flex items-center" data-message-id="msg-initial" onclick="handleMultiLanguageTTS('hi', this)">
                                        <i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Play (HI)
                                    </button>
                                    <button class="tts-button text-xs text-white/70 hover:text-white transition duration-150 flex items-center" data-message-id="msg-initial" onclick="handleMultiLanguageTTS('mr', this)">
                                        <i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Play (MR)
                                    </button>
                                </div>
                                <div id="translate-buttons-msg-initial" class="flex justify-end text-right space-x-2 text-xs font-medium">
                                    <!-- FIX: Updated to call the new helper function, passing 'this' -->
                                    <button class="text-xs text-white/70 hover:text-white underline p-1 rounded transition duration-150" data-lang="mr" onclick="handleInitialTranslation(this, 'mr', 'msg-initial')">Translate to Marathi 🇮🇳</button>
                                    <span class="text-white/50 mx-1">|</span>
                                    <button class="text-xs text-white/70 hover:text-white underline p-1 rounded transition duration-150" data-lang="hi" onclick="handleInitialTranslation(this, 'hi', 'msg-initial')">Translate to Hindi 🇮🇳</button>
                                </div>
                                <div id="translation-container-msg-initial" data-original-text="Hello! 👋 Welcome to your Educational Assistant Bot. I'm ready to help you with your queries. How can I assist you today? Try asking: &quot;What is the fee structure for IT?&quot; or &quot;What are the core subjects in Civil Engineering?&quot; for a structured response!"></div>
                            </div>
                        </div>
                    </div>
                    

</div>
                
                
<div id="quick-replies" class="p-4 bg-gray-100 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 rounded-xl">
                    <div class="flex flex-wrap gap-3 justify-center">
                        <button class="quick-reply-button text-sm font-medium py-2 px-4 rounded-full" onclick="quickReply('How do I apply for admission?')">Admission Process 📝</button>
                        <button class="quick-reply-button text-sm font-medium py-2 px-4 rounded-full" onclick="quickReply('What is the fee structure for IT?')">IT Fee Structure 💰</button>
                        <button class="quick-reply-button text-sm font-medium py-2 px-4 rounded-full" onclick="quickReply('What are the core subjects in Civil Engineering?')">Civil Core Subjects 🏗️</button>
                    </div>
                </div>

                
<footer id="app-footer" class="app-footer border-t p-4 flex items-center space-x-3 shadow-2xl">
                    
                    
<button id="theme-toggle-button" onclick="toggleTheme()" class="text-gray-500 hover:text-[var(--highlight-color)] p-2 rounded-full transition duration-150 active:scale-90">
                        <i data-lucide="moon" class="w-6 h-6"></i>
                    </button>

                    
<button id="mic-button" class="text-gray-500 hover:text-[var(--highlight-color)] p-2 rounded-full transition duration-150 active:scale-90" onclick="toggleSpeechRecognition()">
                        <i data-lucide="mic-2" class="w-6 h-6"></i>
                    </button>

                    
<input type="text" id="user-input" placeholder="Ask about MMCOE... or speak to me via the mic" class="app-input flex-grow p-4 rounded-2xl border-2 focus:ring-4 placeholder-gray-400 transition duration-200" onkeydown="if(event.key === 'Enter') sendMessage()">
                    
                    
<button id="send-button" onclick="sendMessage()" class="bg-[var(--primary-light)] hover:bg-[var(--highlight-color)] text-white font-bold py-3 px-7 rounded-2xl shadow-lg transition duration-200 active:scale-[0.98] disabled:bg-gray-400">
                        <i data-lucide="send" class="w-5 h-5"></i>
                    </button>
                </footer>

            </section>
        </div>
    </div>
    
<script>
        // --- API Configuration and State ---
        const API_KEY = "AIzaSyDb_xBqcK2Dw140VchtHUnu5CRKyiJGg3I"; // Canvas environment provides this.
        const MODEL_NAME = "gemini-2.5-flash-preview-09-2025";
        const CHAT_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${MODEL_NAME}:generateContent?key=${API_KEY}`; 
        
        // --- TTS Configuration (Updated) ---
        const TTS_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${API_KEY}`;
        // Using Aoede as a clear, professional female voice. Language config handles the accent.
        const TTS_VOICE = "Aoede"; 
        
        // Language configurations for TTS
        const LANG_CONFIG = {
            'en': { code: 'en-IN', label: 'English' }, 
            'hi': { code: 'hi-IN', label: 'Hindi' },
            'mr': { code: 'mr-IN', label: 'Marathi' }
        };
        
        let speechRecognitionInstance = null; 
        
        // --- Global Animation State (Re-added) ---
        let canvas, ctx;
        let font_size = 16;
        let columns;
        let drops = [];
        const matrix_text = "MMCOE VECTOR AI"; 
        const max_speed_time = 1500; // Time in ms to reach max speed (fast matrix)
        const matrix_duration = 3000; // Time in ms for the matrix phase
        const text_reveal_duration = 2000; // Time for the MMCOE Vector text reveal
        const fade_out_duration = 1000; // Time for fade out
        let animation_start_time = 0; 
        let current_phase = 'matrix'; // 'matrix', 'text_reveal', 'fade_out', 'finished'
        // --- END Animation State ---
        
        // --- Context Guide (Same as before) ---
        const CONTEXT_GUIDE = (
            "## MMCOE Admission Context Guide\n"
            + "YOU MUST STRICTLY USE THIS INFORMATION, IN ADDITION TO GOOGLE SEARCH, TO ANSWER QUERIES ABOUT MMCOE. \n"
            + "Only provide information directly related to MMCOE, its courses, or the required entrance exams (JEE Main, MHT-CET, HSC/CBSE eligibility).\n\n"
            + "# 🎓 Marathwada Mitra Mandal's College of Engineering (MMCOE) Overview\n"
            + "MMCOE is a well-known private engineering college located in **Pune, Maharashtra** (Karvenagar). It is a top choice for students seeking admission through the centralized state process. \n"
            + "| Feature | Detail |"
            + "| :--- | :--- |"
            + "| **Affiliation** | Savitribai Phule Pune University (SPPU) |"
            + "| **Accreditation** | NAAC A Grade |"
            + "| **Admission Process** | Centralized Admission Process (CAP) rounds conducted by the State CET Cell, Maharashtra. |"
            + "| **Key Courses** | B.Tech/B.E. programs in Computer Engineering, Information Technology, E&TC, Mechanical Engineering, Artificial Intelligence & Data Science (AI/DS), and Civil Engineering. |\n\n"
            + "## 📝 Entrance Exams Required for Admission\n"
            + "Admission to MMCOE's B.Tech programs is strictly based on the merit list prepared using scores from the following entrance tests:\n\n"
            + "### 1. MHT-CET (Maharashtra Common Entrance Test)\n"
            + "* **Primary Pathway:** This is the most common and primary examination for admission to engineering colleges in Maharashtra (State Quota Seats).\n"
            + "* **Eligibility:** Candidates must be Indian nationals and must have passed or appeared for the 10+2 (HSC or equivalent) examination with Physics and Mathematics as compulsory subjects, along with one of Chemistry, Biotechnology, Biology, or Vocational Technical subject.\n"
            + "* **Selection:** Your MHT-CET score determines your **Maharashtra State Merit Rank**, which is used during the CAP rounds for seat allocation at MMCOE.\n"
            + "* **Note:** You can appear for both exams and the CAP process will consider the better of the two scores for merit ranking if you apply under the All India category.\n\n"
            + "### 2. JEE Main (Joint Entrance Examination Main)\n"
            + "* **All India Quota:** JEE Main scores are used for a limited number of seats (typically 15-20%) reserved under the All India Quota, or if the candidate prefers to use the JEE score over the MHT-CET score.\n"
            + "* **Selection:** JEE Main ranks are also converted into a State Merit Rank equivalent for participation in the same CAP rounds.\n"
            + "* **Note:** You can appear for both exams and the CAP process will consider the better of the two scores for merit ranking if you apply under the All India category.\n\n"
            + "## 📚 Role of HSC & CBSE Board Exams (10+2)\n"
            + "Your board exam performance (HSC/CBSE) is critical for fulfilling the **eligibility criteria**, though it usually does not directly determine your merit rank, which is based on MHT-CET/JEE scores.\n\n"
            + "| Board Exam Requirement | Detail |"
            + "| :--- | :--- |"
            + "| **Mandatory Subjects** | Physics and Mathematics (compulsory), plus one optional technical subject (e.g., Chemistry). |"
            + "| **Minimum Aggregate Marks** | You must secure a minimum prescribed percentage in the qualifying examination (HSC/CBSE). Historically, this minimum is typically **45% aggregate** in PCM (Physics, Chemistry, Math) for Open category students, with relaxation (e.g., 40%) for Backward Class categories in Maharashtra. |"
            + "| **Function** | Board marks serve as a **gate pass**. Without meeting the minimum percentage, you cannot participate in the CAP process, even with a high MHT-CET or JEE score. |\n\n"
            + "## Key Takeaway\n"
            + "To get into MMCOE:\n"
            + "1. **Clear the minimum HSC/CBSE percentage requirement** (45% for general).\n"
            + "2. **Score a high rank** in either **MHT-CET** (preferred for State Seats) or **JEE Main** (for All India Seats). The admission is finalized through the CAP merit lists.\n\n"
        );
        // --- END CONTEXT GUIDE ---

        // The SYSTEM_PROMPT now combines the fixed context with the RAG/search instruction and the new scope/format enforcement.
        const SYSTEM_PROMPT = CONTEXT_GUIDE + (
            "You are MMCOE Vector, a friendly, professional, and highly knowledgeable AI assistant. "
            + "Your expertise is strictly limited to the **educational domain**, including: MMCOE College, "
            + "other educational institutions, academic subjects, courses, fees, admission processes, and examinations (like MHT-CET/JEE Main). "
            + "Always provide concise, accurate, and structured answers, leveraging the provided context guide and the latest search results (RAG) to ensure accuracy. "
            + "### TABULAR FORMAT INSTRUCTION ###\n"
            + "If the user asks specifically about 'courses offered', 'departments', or 'fee structure', you MUST present the information in a professional, well-structured Markdown table for clarity. "
            + "### CRITICAL KNOWLEDGE SCOPE INSTRUCTION ###\n"
            + "If the user's query is *not* related to the educational domain (e.g., questions about weather, sports, celebrity gossip, cooking, or general non-academic topics), "
            + "you MUST ONLY respond with the following exact, formal phrase: **Sorry, this question is out of my field. My expertise is limited to academic, institutional, and examination-related queries. 🎓**"
            + "For all in-scope educational questions, provide a relevant, helpful, and concise answer using emojis."
        );
        
        // System instruction for Content Moderation
        const MODERATION_SYSTEM_PROMPT = (
            "You are a strict, multilingual content moderator for an academic institution's chatbot. "
            + "Your sole task is to analyze the user's query for swearing, abusive language, or disrespectful tone "
            + "in **English and Marathi**. If the language is appropriate, respond ONLY with the word 'CLEAN'. "
            + "If the language is inappropriate, respond ONLY with the following short, formal request in both languages: "
            + "'कृपया सभ्य भाषा वापरा. Please use polite language and maintain a formal tone. 🚫'"
        );
        
        // System instruction for the Translation task
        const TRANSLATION_SYSTEM_PROMPT = (
            "You are an expert translator. Your task is to accurately translate the provided English text into the target language, "
            + "either Hindi or Marathi. Respond ONLY with the translated text, preserving the original formatting (like markdown lists or tables) "
            + "as much as possible."
        );
        // --- End Configuration ---
        
        // Global Constants
        const chatBox = document.getElementById('chat-box');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const themeToggleButton = document.getElementById('theme-toggle-button');
        const micButton = document.getElementById('mic-button');

        // --- NEW UTILITY FUNCTION FOR CONDITIONAL SCROLLING ---
        /**
         * Scrolls the chat to the bottom only if the user is already scrolled near the bottom (e.g., reading the newest messages).
         * This prevents the chat from jumping when the user is reading previous content.
         */
        function scrollChatIfNearBottom() {
            // A threshold of 100 pixels from the bottom edge
            const scrollThreshold = 100; 
            const isNearBottom = chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight < scrollThreshold;

            if (isNearBottom) {
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        }
        // --- END NEW UTILITY FUNCTION ---


        // --- INTRO ANIMATION LOGIC (DECOMPILATION SEQUENCE) ---

        /**
         * Sets up the canvas and initial state for the matrix effect.
         */
        function setupIntroAnimation() {
            canvas = document.getElementById('intro-canvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas dimensions to viewport size
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            columns = Math.floor(canvas.width / font_size);
            drops = [];
            for (let i = 0; i < columns; i++) {
                drops[i] = 1;
            }
            
            // Re-run setup on resize to maintain full screen effect
            window.addEventListener('resize', setupIntroAnimation);
            
            animation_start_time = performance.now();
            current_phase = 'matrix';
            
            // Start the animation loop
            animateIntroCanvas(animation_start_time);
        }

        /**
         * Main animation loop using requestAnimationFrame.
         */
        function animateIntroCanvas(currentTime) {
            if (current_phase === 'finished') return;

            const elapsed = currentTime - animation_start_time;
            
            // ------------------------------------
            // Phase 1: Matrix Code Rain (0ms to matrix_duration)
            // ------------------------------------
            if (current_phase === 'matrix') {
                
                const speed_factor = Math.min(1, elapsed / max_speed_time); 
                
                // Draw black rectangle to fade the previous frame
                ctx.fillStyle = `rgba(0, 0, 0, ${0.1 + speed_factor * 0.1})`; 
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Set font style
                ctx.fillStyle = "#FF7043"; // Bright Red/Orange for code
                ctx.font = `${font_size}px Inter`;

                for (let i = 0; i < drops.length; i++) {
                    // Pick a random char from matrix_text
                    const text = matrix_text[Math.floor(Math.random() * matrix_text.length)];
                    
                    // Draw the character
                    const x = i * font_size;
                    const y = drops[i] * font_size;
                    ctx.fillText(text, x, y);

                    // Send the drop back to the top randomly
                    if (y * font_size > canvas.height && Math.random() > 0.98) {
                        drops[i] = 0;
                    }
                    
                    // Move the drop down, speed increases over time
                    drops[i]++;
                    drops[i] += Math.floor(speed_factor * 2); 
                    
                    // Phase transition
                    if (elapsed >= matrix_duration) {
                        current_phase = 'text_reveal';
                        // Reset timer for text reveal
                        animation_start_time = currentTime;
                    }
                }
            }
            
            // ------------------------------------
            // Phase 2: Text Reveal (matrix_duration to matrix_duration + text_reveal_duration)
            // ------------------------------------
            else if (current_phase === 'text_reveal') {
                const text_elapsed = currentTime - animation_start_time;
                const text_progress = Math.min(1, text_elapsed / text_reveal_duration);
                
                // Darken the background more aggressively
                ctx.fillStyle = `rgba(0, 0, 0, 0.2)`; 
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                // Draw the main text
                ctx.globalAlpha = text_progress;
                ctx.fillStyle = "#9A1C19"; // MMCOE Primary Color (Dark Maroon)
                ctx.font = `italic 900 ${100 + 50 * text_progress}px 'Inter', sans-serif`;
                ctx.textAlign = 'center';
                // Center text slightly above true center for balance
                ctx.fillText("MMCOE Vector", canvas.width / 2, canvas.height / 2 + 10); 
                ctx.globalAlpha = 1.0;
                
                // Phase transition
                if (text_progress >= 1) {
                    current_phase = 'fade_out';
                    // Reset timer for fade out
                    animation_start_time = currentTime; 
                }
            }

            // ------------------------------------
            // Phase 3: Fade Out (fade_out_duration)
            // ------------------------------------
            else if (current_phase === 'fade_out') {
                const fade_elapsed = currentTime - animation_start_time;
                const fade_progress = Math.min(1, fade_elapsed / fade_out_duration);
                
                // Apply transparency to the entire canvas layer
                canvas.style.opacity = 1.0 - fade_progress;

                // Phase transition
                if (fade_progress >= 1) {
                    current_phase = 'finished';
                    // Final action: switch to the main chat interface
                    hideIntroAnimation();
                    return; 
                }
            }

            requestAnimationFrame(animateIntroCanvas);
        }


        /**
         * Hides the animation canvas and reveals the main chat interface.
         */
        function hideIntroAnimation() {
            canvas.style.display = 'none';
            const mainContent = document.getElementById('main-content');
            mainContent.classList.remove('hidden');
            
            // Start the opacity transition for the main content
            setTimeout(() => {
                mainContent.style.transition = 'opacity 0.5s ease-in-out';
                mainContent.style.opacity = 1;
                
                // Now that the main content is visible, we load the required scripts and initialize the chat
                loadScripts([
                    'https://cdnjs.cloudflare.com/ajax/libs/marked/12.0.0/marked.min.js',
                    'https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.6/purify.min.js'
                ], () => {
                    console.log('Markdown and DOMPurify loaded. Initializing App...');
                    initializeSpeechRecognition(); // Initialize STT
                    applyTheme(); 
                    updateDateDayTracker(); // Initialize Date/Day Tracker
                    
                    // Manually set up the initial message for TTS/Translation
                    const initialMessageText = "Hello! 👋 Welcome to your Educational Assistant Bot. I'm ready to help you with your queries. How can I assist you today? Try asking: \"What is the fee structure for IT?\" or \"What are the core subjects in Civil Engineering?\" for a structured response!";
                    const initialTranslationContainer = document.getElementById('translation-container-msg-initial');
                    
                    if (initialTranslationContainer) {
                        // Update the raw text for TTS/Translation
                        initialTranslationContainer.dataset.originalText = initialMessageText.replace(/`/g, '\\`').replace(/'/g, "\\'");
                    }
                    
                    if (typeof lucide !== 'undefined') {
                        lucide.createIcons();
                    }
                    userInput.focus();
                    // FIX APPLIED HERE: Use conditional scroll on initial load
                    scrollChatIfNearBottom();
                });
                
            }, 10);
            
            // Remove resize listener to prevent continuous resizing after intro
            window.removeEventListener('resize', setupIntroAnimation);
        }

        // --- END INTRO ANIMATION LOGIC ---


        // --- NEW FUNCTION: DATE/DAY TRACKER ---

        /**
         * Updates the date and day tracker in the sidebar.
         */
        function updateDateDayTracker() {
            const now = new Date();
            // Options for full day name (e.g., TUESDAY)
            const dayOptions = { weekday: 'long' }; 
            // Options for Month Day, Year (e.g., October 21, 2025)
            const dateOptions = { year: 'numeric', month: 'long', day: 'numeric' }; 

            const dayString = now.toLocaleDateString('en-US', dayOptions).toUpperCase();
            const dateString = now.toLocaleDateString('en-US', dateOptions);

            const dayElement = document.getElementById('current-day');
            const dateElement = document.getElementById('current-date');
            
            if (dayElement && dateElement) {
                dayElement.textContent = dayString;
                dateElement.textContent = dateString;
            }
        }
        
        // --- END NEW FUNCTION ---
        
        // --- AUDIO UTILITIES (FOR TTS) ---
        
        /**
         * Converts a Base64 string to an ArrayBuffer.
         * @param {string} base64 The base64 encoded string.
         * @returns {ArrayBuffer}
         */
        function base64ToArrayBuffer(base64) {
            const binaryString = atob(base64);
            const len = binaryString.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        }

        /**
         * Converts signed 16-bit PCM audio data to a WAV file Blob.
         * The API returns L16 audio data.
         * @param {Int16Array} pcm16 Array of 16-bit PCM samples.
         * @param {number} sampleRate The sample rate (e.g., 24000).
         * @returns {Blob} A Blob object containing the WAV data.
         */
        function pcmToWav(pcm16, sampleRate) {
            const numChannels = 1;
            const bytesPerSample = 2; // 16-bit
            const blockAlign = numChannels * bytesPerSample;
            
            const buffer = new ArrayBuffer(44 + pcm16.byteLength);
            const view = new DataView(buffer);

            // Helper function to write a string to a DataView
            function writeString(view, offset, string) {
                for (let i = 0; i < string.length; i++) {
                    view.setUint8(offset + i, string.charCodeAt(i));
                }
                }

            // RIFF chunk descriptor
            writeString(view, 0, 'RIFF'); // ChunkID
            view.setUint32(4, 36 + pcm16.byteLength, true); // ChunkSize
            writeString(view, 8, 'WAVE'); // Format

            // FMT sub-chunk
            writeString(view, 12, 'fmt '); // Subchunk1ID
            view.setUint32(16, 16, true); // Subchunk1Size (16 for PCM)
            view.setUint16(20, 1, true); // AudioFormat (1 for PCM)
            view.setUint16(22, numChannels, true); // NumChannels
            view.setUint32(24, sampleRate, true); // SampleRate
            view.setUint32(28, sampleRate * blockAlign, true); // ByteRate
            view.setUint16(32, blockAlign, true); // BlockAlign
            view.setUint16(34, bytesPerSample * 8, true); // BitsPerSample (16)

            // Data sub-chunk
            writeString(view, 36, 'data'); // Subchunk2ID
            view.setUint32(40, pcm16.byteLength, true); // Subchunk2Size

            // Write PCM data
            let offset = 44;
            for (let i = 0; i < pcm16.length; i++) {
                view.setInt16(offset, pcm16[i], true); // Write 16-bit signed integer
                offset += 2;
            }

            return new Blob([view], { type: 'audio/wav' });
        }
        
        /**
         * Generic function to make the TTS API call and play the resulting audio.
         * @param {string} text The text to be synthesized.
         * @param {string} languageCode The BCP-47 language code (e.g., 'en-IN', 'hi-IN').
         * @param {HTMLElement} buttonElement The button that triggered the playback.
         */
        async function readTextAloud(text, languageCode, buttonElement) {
            if (!text || !languageCode) return;

            const originalButtonContent = buttonElement.innerHTML;
            
            // Disable button and show loading state
            buttonElement.disabled = true;
            buttonElement.innerHTML = `<i data-lucide="loader-2" class="w-4 h-4 mr-1 animate-spin"></i> Generating...`;
            if (typeof lucide !== 'undefined') { lucide.createIcons(); }

            const payload = {
                contents: [{ parts: [{ text: text }] }],
                generationConfig: {
                    responseModalities: ["AUDIO"],
                    speechConfig: {
                        voiceConfig: {
                            prebuiltVoiceConfig: { voiceName: TTS_VOICE }
                        },
                        // Explicitly set language code for accent control
                        languageCode: languageCode 
                    }
                }
            };

            let audio = null;
            let audioUrl = null;
            try {
                const response = await fetchWithBackoff(TTS_API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                const part = result?.candidates?.[0]?.content?.parts?.[0];
                const audioData = part?.inlineData?.data;
                const mimeType = part?.inlineData?.mimeType;

                if (audioData && mimeType && mimeType.startsWith("audio/L16")) {
                    const rateMatch = mimeType.match(/rate=(\d+)/);
                    const sampleRate = rateMatch ? parseInt(rateMatch[1], 10) : 24000;
                    
                    const pcmData = base64ToArrayBuffer(audioData);
                    const pcm16 = new Int16Array(pcmData);
                    
                    const wavBlob = pcmToWav(pcm16, sampleRate);
                    audioUrl = URL.createObjectURL(wavBlob);
                    
                    audio = new Audio(audioUrl);
                    
                    // Show Playing State
                    buttonElement.innerHTML = `<i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Playing...`;
                    if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                    
                    audio.play();

                    audio.onended = () => {
                        // Reset button after playback: This is the desired 'stop and break' behavior.
                        buttonElement.innerHTML = originalButtonContent;
                        buttonElement.disabled = false;
                        if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                        if (audioUrl) URL.revokeObjectURL(audioUrl); // Clean up
                    };

                } else {
                    console.error("TTS Response missing audio data or invalid mimeType:", result);
                    buttonElement.innerHTML = `<i data-lucide="volume-x" class="w-4 h-4 mr-1"></i> Failed`;
                }

            } catch (error) {
                console.error("TTS API call failed:", error);
                buttonElement.innerHTML = `<i data-lucide="volume-x" class="w-4 h-4 mr-1"></i> API Error`;
            } finally {
                // Only reset if playback wasn't successfully started
                if (audio === null || !audio.onended) { 
                    setTimeout(() => {
                        buttonElement.innerHTML = originalButtonContent;
                        buttonElement.disabled = false;
                        if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                    }, 2000);
                }
            }
        }
        
        /**
         * Handles the multi-language TTS request, translating first if necessary.
         */
        async function handleMultiLanguageTTS(langCode, buttonElement) {
            const messageId = buttonElement.getAttribute('data-message-id');
            const translationContainer = document.getElementById(`translation-container-${messageId}`);
            const rawText = translationContainer.dataset.originalText;
            const targetLangConfig = LANG_CONFIG[langCode];

            if (!rawText || !targetLangConfig) return;

            let textToSpeak = rawText;
            const originalButtonContent = buttonElement.innerHTML;

            // Step 1: Translate if not English
            if (langCode !== 'en') {
                buttonElement.disabled = true; // Disable during translation phase
                buttonElement.innerHTML = `<i data-lucide="loader-2" class="w-4 h-4 mr-1 animate-spin"></i> Translating...`;
                if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                
                const translationQuery = `Translate the following into ${targetLangConfig.label}:\n\n${rawText}`;

                const translationPayload = {
                    contents: [{ parts: [{ text: translationQuery }] }],
                    systemInstruction: { parts: [{ text: TRANSLATION_SYSTEM_PROMPT }] },
                    generationConfig: {
                        language: langCode // Hint for the model
                    }
                };

                try {
                    const response = await fetchWithBackoff(CHAT_API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(translationPayload)
                    });

                    const result = await response.json();
                    const translatedText = result.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
                    
                    if (translatedText) {
                        textToSpeak = translatedText;
                    } else {
                        // Translation failed, revert button and exit
                        buttonElement.innerHTML = originalButtonContent;
                        buttonElement.disabled = false;
                        if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                        return; 
                    }

                } catch (error) {
                    console.error("Translation for TTS failed:", error);
                    buttonElement.innerHTML = originalButtonContent;
                    buttonElement.disabled = false; // Re-enable on failure
                    if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                    return; 
                }
            }
            
            // Step 2: Perform TTS (Button remains disabled until audio.onended in readTextAloud)
            await readTextAloud(textToSpeak, targetLangConfig.code, buttonElement);
        }

        /**
         * Applies the saved theme preference on page load.
         */
        function applyTheme() {
            const currentTheme = localStorage.getItem('theme') || 'light';
            const body = document.body;
            const themeIcon = themeToggleButton.querySelector('i');

            if (currentTheme === 'dark') {
                body.classList.add('dark-mode');
                themeIcon.setAttribute('data-lucide', 'sun');
            } else {
                body.classList.remove('dark-mode');
                body.classList.add('light-mode'); 
                themeIcon.setAttribute('data-lucide', 'moon');
            }
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        /**
         * Toggles the theme between light and dark mode and saves preference.
         */
        function toggleTheme() {
            const body = document.body;
            const isDark = body.classList.toggle('dark-mode');
            
            const newTheme = isDark ? 'dark' : 'light';
            localStorage.setItem('theme', newTheme);
            
            const themeIcon = themeToggleButton.querySelector('i');
            themeIcon.setAttribute('data-lucide', isDark ? 'sun' : 'moon');

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }
        
        /**
         * Utility function to implement exponential backoff for API calls.
         */
        async function fetchWithBackoff(url, options, maxRetries = 5) {
            for (let i = 0; i < maxRetries; i++) {
                try {
                    const response = await fetch(url, options);
                    if (response.status === 429 || response.status >= 500) {
                        throw new Error(`Server error or rate limit: ${response.status}`);
                    }
                    return response;
                } catch (error) {
                    if (i === maxRetries - 1) {
                        console.error("Max retries reached. Failing request.", error);
                        throw error;
                    }
                    const delay = Math.pow(2, i) * 1000 + Math.random() * 1000;
                    // console.warn(`Retrying request attempt ${i + 1}/${maxRetries} in ${delay.toFixed(0)}ms...`); // Suppress logging
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }
        
        // --- NEW HELPER FUNCTION FOR INITIAL MESSAGE ---
        /**
         * Helper function for the initial static message buttons to correctly pass context (the button element).
         * This replaces the fragile translateInitialText() function.
         */
        function handleInitialTranslation(buttonElement, targetLanguage, messageId) {
            const translationContainer = document.getElementById(`translation-container-${messageId}`);
            const originalText = translationContainer.dataset.originalText;
            
            if (originalText) {
                // Call the main translation function, passing the button element
                translateText(buttonElement, targetLanguage, originalText, messageId);
            }
        }
        // --- END NEW HELPER FUNCTION ---

        /**
         * Hides the translation box and restores the translate buttons to their original state.
         * Note: The restoration logic is now inside this function to safely re-render the buttons.
         */
        function hideTranslation(messageId) {
            const translationContainer = document.getElementById(`translation-container-${messageId}`);
            const translateButtons = document.getElementById(`translate-buttons-${messageId}`);
            const originalText = translationContainer.dataset.originalText;
            
            // 1. Clear the output box
            if (translationContainer) translationContainer.innerHTML = '';
            
            // 2. Restore the buttons to their initial state (re-rendering innerHTML is the safest reset)
            if (translateButtons && originalText) {
                const safeOriginalText = originalText.replace(/`/g, '\\`').replace(/'/g, "\\'");
                
                // Determine the correct function handler for the restored buttons
                let mrHandler, hiHandler;
                if (messageId === 'msg-initial') {
                    // Static initial message uses the helper handler
                    mrHandler = `handleInitialTranslation(this, 'mr', '${messageId}')`;
                    hiHandler = `handleInitialTranslation(this, 'hi', '${messageId}')`;
                } else {
                    // Dynamic chat messages use the main translation function
                    mrHandler = `translateText(this, 'mr', \`${safeOriginalText}\`, '${messageId}')`;
                    hiHandler = `translateText(this, 'hi', \`${safeOriginalText}\`, '${messageId}')`;
                }

                translateButtons.innerHTML = `
                    <button class="text-xs text-white/70 hover:text-white underline p-1 rounded transition duration-150" data-lang="mr" onclick="${mrHandler}">Translate to Marathi 🇮🇳</button>
                    <span class="text-white/50 mx-1">|</span>
                    <button class="text-xs text-white/70 hover:text-white underline p-1 rounded transition duration-150" data-lang="hi" onclick="${hiHandler}">Translate to Hindi 🇮🇳</button>
                `;
            }
        }

        /**
         * Uses a dedicated AI call to translate the text for VISUAL display.
         * FIX: Now accepts the buttonElement directly for robust state management.
         */
        async function translateText(buttonElement, targetLanguage, originalText, messageId) {
            const translationContainer = document.getElementById(`translation-container-${messageId}`);
            const translateButtons = document.getElementById(`translate-buttons-${messageId}`);
            
            const originalButtonContent = buttonElement.innerHTML;
            const loadingText = targetLanguage === 'hi' ? 'Translating to Hindi...' : 'Translating to Marathi...';
            
            // Clear any existing translation first
            translationContainer.innerHTML = '';
            
            // Disable button and show loading state
            buttonElement.disabled = true;
            buttonElement.innerHTML = `<i data-lucide="loader-2" class="w-4 h-4 mr-1 animate-spin"></i> ${loadingText}`;
            if (typeof lucide !== 'undefined') { lucide.createIcons(); }


            const targetLangConfig = LANG_CONFIG[targetLanguage];
            const targetLangName = targetLangConfig.label;
            
            const translationQuery = `Translate the following into ${targetLangName}:\n\n${originalText}`;

            const translationPayload = {
                contents: [{ parts: [{ text: translationQuery }] }],
                    systemInstruction: { parts: [{ text: TRANSLATION_SYSTEM_PROMPT }] },
                generationConfig: {
                    language: targetLanguage
                }
            };

            try {
                const response = await fetchWithBackoff(CHAT_API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(translationPayload)
                });

                const result = await response.json();
                const translatedText = result.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

                if (translatedText) {
                    translationContainer.innerHTML = `
                        <div class="mt-3 p-3 bg-white/10 rounded-lg translation-content">
                            <p class="font-bold text-sm mb-1">${targetLangName} Translation:</p>
                            <div class="text-sm">
                                ${DOMPurify.sanitize(marked.parse(translatedText))}
                            </div>
                        </div>
                    `;
                    
                    // Restore the *other* button immediately to be clickable
                    const otherLang = targetLanguage === 'hi' ? 'mr' : 'hi';
                    const otherButton = translateButtons.querySelector(`[data-lang="${otherLang}"]`);
                    if (otherButton) {
                        // Re-trigger hideTranslation to restore the button set, then re-locate the clicked button
                        hideTranslation(messageId); 
                        // Now the buttons are restored, find the clicked language button again
                        const clickedButtonToModify = translateButtons.querySelector(`[data-lang="${targetLanguage}"]`);
                        
                        // Update the clicked button (which is now restored) to the hide state
                        if (clickedButtonToModify) {
                            clickedButtonToModify.innerHTML = `<i data-lucide="eye-off" class="w-4 h-4 mr-1"></i> Hide Translation`;
                            clickedButtonToModify.onclick = () => hideTranslation(messageId);
                            clickedButtonToModify.disabled = false;
                            if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                        }
                    } else {
                         // Case for only one button being present (shouldn't happen here) or initial message flow
                        buttonElement.innerHTML = `<i data-lucide="eye-off" class="w-4 h-4 mr-1"></i> Hide Translation`;
                        buttonElement.onclick = () => hideTranslation(messageId);
                        buttonElement.disabled = false;
                        if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                    }


                } else {
                    translationContainer.innerHTML = `<p class="text-sm text-red-200">Translation failed. Please try again.</p>`;
                    buttonElement.innerHTML = originalButtonContent;
                    buttonElement.disabled = false; 
                    if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                }
            } catch (error) {
                console.error("Translation API call failed:", error);
                translationContainer.innerHTML = `<p class="text-sm text-red-200">Network Error: Could not reach translation service.</p>`;
                buttonElement.innerHTML = originalButtonContent;
                buttonElement.disabled = false; 
                if (typeof lucide !== 'undefined') { lucide.createIcons(); }
            }
        }


        /**
         * Creates and appends a message bubble to the chat box.
         */
        function displayMessage(content, sender, sources = [], isSimulation = false, messageId = null, rawText = null) {
            const messageWrapper = document.createElement('div');
            messageWrapper.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'}`;

            const messageBubble = document.createElement('div');
            messageBubble.className = `${sender === 'user' ? 'user-message' : 'bot-message'} p-4 max-w-sm md:max-w-md shadow-lg transition duration-300 ease-out transform translate-y-4 opacity-0`;
            
            if (sender === 'bot' && !isSimulation) {
                messageBubble.innerHTML = DOMPurify.sanitize(marked.parse(content));

                // Add sources if available
                if (sources.length > 0) {
                    const sourcesDiv = document.createElement('div');
                    sourcesDiv.className = 'mt-3 pt-2 border-t border-white/30 text-xs flex flex-wrap gap-2';
                    sourcesDiv.innerHTML = `<p class="font-bold w-full mb-1 text-xs opacity-80">Sources (Live Data):</p>`;
                    
                    sources.forEach((source) => {
                        const sourceTitle = source.title || source.uri.split('/')[2];
                        sourcesDiv.innerHTML += `<a href="${source.uri}" target="_blank" class="source-tag">
                                <i data-lucide="link" class="w-3 h-3 mr-1"></i>
                                <span>${sourceTitle}</span>
                            </a>`;
                    });
                    
                    messageBubble.appendChild(sourcesDiv);
                }
                
                // --- TTS and Translation Area ---
                if (rawText) {
                    const utilityArea = document.createElement('div');
                    utilityArea.className = 'mt-3 pt-2 border-t border-white/30 space-y-2';
                    
                    const safeRawText = rawText.replace(/`/g, '\\`').replace(/'/g, "\\'"); 

                    // 1. TTS Buttons
                    const ttsButtonsDiv = document.createElement('div');
                    ttsButtonsDiv.id = `tts-buttons-${messageId}`;
                    ttsButtonsDiv.className = 'flex flex-wrap gap-2 justify-start text-xs font-medium';
                    ttsButtonsDiv.innerHTML = `
                        <button class="tts-button text-xs text-white/70 hover:text-white transition duration-150 flex items-center" data-message-id="${messageId}" onclick="handleMultiLanguageTTS('en', this)">
                            <i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Play (EN)
                        </button>
                        <button class="tts-button text-xs text-white/70 hover:text-white transition duration-150 flex items-center" data-message-id="${messageId}" onclick="handleMultiLanguageTTS('hi', this)">
                            <i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Play (HI)
                        </button>
                        <button class="tts-button text-xs text-white/70 hover:text-white transition duration-150 flex items-center" data-message-id="${messageId}" onclick="handleMultiLanguageTTS('mr', this)">
                            <i data-lucide="volume-2" class="w-4 h-4 mr-1"></i> Play (MR)
                        </button>
                    `;
                    utilityArea.appendChild(ttsButtonsDiv);


                    // 2. Translation Buttons
                    const buttonsDiv = document.createElement('div');
                    buttonsDiv.id = `translate-buttons-${messageId}`;
                    buttonsDiv.className = 'flex justify-end text-right space-x-2 text-xs font-medium';
                    // FIX: Buttons now pass 'this' for robust function execution.
                    buttonsDiv.innerHTML = `
                        <button class="text-xs text-white/70 hover:text-white underline p-1 rounded transition duration-150" data-lang="mr" onclick="translateText(this, 'mr', \`${safeRawText}\`, '${messageId}')">Translate to Marathi 🇮🇳</button>
                        <span class="text-white/50 mx-1">|</span>
                        <button class="text-xs text-white/70 hover:text-white underline p-1 rounded transition duration-150" data-lang="hi" onclick="translateText(this, 'hi', \`${safeRawText}\`, '${messageId}')">Translate to Hindi 🇮🇳</button>
                    `;
                    utilityArea.appendChild(buttonsDiv);
                    
                    // 3. Translation Output Container
                    const containerDiv = document.createElement('div');
                    containerDiv.id = `translation-container-${messageId}`;
                    containerDiv.dataset.originalText = safeRawText; 
                    utilityArea.appendChild(containerDiv);
                    
                    messageBubble.appendChild(utilityArea);
                }
            } else {
                messageBubble.textContent = content;
            }

            chatBox.appendChild(messageWrapper);
            messageWrapper.appendChild(messageBubble);

            // Animate message in and re-render lucide icons
            setTimeout(() => {
                messageBubble.classList.remove('translate-y-4', 'opacity-0');
                messageBubble.classList.add('translate-y-0', 'opacity-100');
                if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                
                // --- FIX APPLIED HERE: Force scroll for USER messages, conditional scroll for BOT messages ---
                if (sender === 'user') {
                    // Force scroll to the bottom when the user submits a message.
                    chatBox.scrollTop = chatBox.scrollHeight; 
                } else {
                    // Use conditional scroll for bot messages to prevent scroll-hijacking while reading.
                    scrollChatIfNearBottom(); 
                }
                // --- END FIX ---
            }, 10);
        }

        /**
         * Toggles the loading/typing indicator for the bot.
         */
        function toggleLoading(show) {
            let loadingElement = document.getElementById('loading-indicator');

            if (show) {
                sendButton.disabled = true;
                userInput.disabled = true;
                micButton.disabled = true;
                
                if (!loadingElement) {
                    loadingElement = document.createElement('div');
                    loadingElement.id = 'loading-indicator';
                    loadingElement.className = 'flex justify-start';
                    loadingElement.innerHTML = `
                        <div class="bot-message typing-indicator p-4 max-w-sm md:max-w-md shadow-lg transition duration-300">
                            <span class="mr-1 inline-block w-2 h-2 rounded-full bg-white animate-pulse" style="animation-delay: 0s;"></span>
                            <span class="mr-1 inline-block w-2 h-2 rounded-full bg-white animate-pulse" style="animation-delay: 0.2s;"></span>
                            <span class="inline-block w-2 h-2 rounded-full bg-white animate-pulse" style="animation-delay: 0.4s;"></span>
                            <span class="ml-2">MMCOE Vector is processing your request...</span>
                        </div>
                    `;
                    chatBox.appendChild(loadingElement);
                    // FIX APPLIED HERE: Use conditional scroll instead of forcing scroll
                    scrollChatIfNearBottom();
                }
            } else {
                sendButton.disabled = false;
                userInput.disabled = false;
                micButton.disabled = false;
                if (loadingElement) {
                    loadingElement.remove();
                }
            }
        }
        
        /**
         * Uses a dedicated AI call to check for inappropriate language.
         */
        async function moderateContent(query) {
            const moderationPayload = {
                contents: [{ parts: [{ text: query }] }],
                systemInstruction: { parts: [{ text: MODERATION_SYSTEM_PROMPT }] },
            };

            try {
                const response = await fetchWithBackoff(CHAT_API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(moderationPayload)
                });

                const result = await response.json();
                const responseText = result.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

                if (responseText && responseText.toUpperCase() !== 'CLEAN') {
                    return responseText; 
                }
                return true; // Safe to proceed
            } catch (error) {
                console.error("Moderation API call failed:", error);
                return true; 
            }
        }
        
        // --- STT (Speech-to-Text) Implementation ---
        
        function initializeSpeechRecognition() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

            if (!SpeechRecognition) {
                console.warn('Speech Recognition not supported in this browser. Feature disabled.');
                micButton.style.display = 'none';
                return;
            }

            speechRecognitionInstance = new SpeechRecognition();
            speechRecognitionInstance.continuous = false;
            speechRecognitionInstance.interimResults = false;
            speechRecognitionInstance.lang = 'en-IN'; // Set language for Indian English recognition

            speechRecognitionInstance.onstart = () => {
                micButton.classList.add('mic-listening');
                micButton.innerHTML = '<i data-lucide="mic" class="w-6 h-6"></i>'; // Change icon to a simple mic
                if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                userInput.placeholder = "Listening... Speak now...";
            };

            speechRecognitionInstance.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                userInput.value = transcript.trim();
                sendMessage(); // Automatically send the message after successful transcription
            };

            speechRecognitionInstance.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                let message = `Voice input error: ${event.error}.`;
                if (event.error === 'not-allowed') {
                    // *** FIX APPLIED HERE: Added context for security/iframe issue ***
                    message = "Microphone access has been explicitly blocked or is restricted by the browser's **security policy** (often in embedded previews like this one). Please try reloading the page, or ensure the document is running in a secure (HTTPS) environment. 🚫";
                } else if (event.error === 'no-speech') {
                    message = "No speech detected. Please speak louder and clearer.";
                } else if (event.error === 'network') {
                    message = "A network error occurred during speech processing. Check your connection. 🌐";
                }
                displayMessage(message, 'bot', [], false, `err-${Date.now()}`, message);
            };

            speechRecognitionInstance.onend = () => {
                micButton.classList.remove('mic-listening');
                micButton.innerHTML = '<i data-lucide="mic-2" class="w-6 h-6"></i>';
                if (typeof lucide !== 'undefined') { lucide.createIcons(); }
                userInput.placeholder = "Ask about MMCOE... or speak to me via the mic";
            };
        }

        function toggleSpeechRecognition() {
            if (!speechRecognitionInstance) return;

            try {
                // If recognition is already active, stop it
                if (micButton.classList.contains('mic-listening')) {
                    speechRecognitionInstance.stop();
                } else {
                    // Start recognition
                    speechRecognitionInstance.start();
                }
            } catch (e) {
                if (e.name === 'InvalidStateError') {
                    // This error occurs if start() is called while recognition is already starting/active
                    console.warn("Recognition already active or starting.");
                } else {
                    console.error("Error toggling speech recognition:", e);
                }
            }
        }
        // --- END STT Implementation ---

        /**
         * Main function to send the user message and fetch the bot response directly from the Gemini API.
         */
        async function sendMessage() {
            const query = userInput.value.trim();
            if (!query) return;

            // 1. Display user message and clear input
            displayMessage(query, 'user');
            userInput.value = '';

            // 2. Show loading indicator
            toggleLoading(true);

            // --- STEP 2.1: Content Moderation Check ---
            const moderationResult = await moderateContent(query);
            if (typeof moderationResult === 'string') {
                toggleLoading(false); 
                const modMessageId = `mod-${Date.now()}`;
                displayMessage(moderationResult, 'bot', [], false, modMessageId, moderationResult);
                userInput.focus();
                return; 
            }
            // --- END MODERATION CHECK ---
            
            const messageId = `msg-${Date.now()}`;
            let rawBotText = ""; 

            // --- STEP 3: Proceed with RAG (Search Grounding) Query ---
            try {
                const payload = {
                    contents: [{ parts: [{ text: query }] }],
                    tools: [{ "google_search": {} }], 
                    systemInstruction: { parts: [{ text: SYSTEM_PROMPT }] },
                };

                const response = await fetchWithBackoff(CHAT_API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                
                const candidate = result.candidates?.[0];
                let botText = "I apologize, an unknown error occurred when processing the AI response. Please try a different query. 😔";
                let sources = [];
                
                if (candidate && candidate.content?.parts?.[0]?.text) {
                    rawBotText = candidate.content.parts[0].text;
                    botText = rawBotText;
                    
                    const groundingMetadata = candidate.groundingMetadata;
                    if (groundingMetadata && groundingMetadata.groundingAttributions) {
                        sources = groundingMetadata.groundingAttributions
                            .map(attribution => ({
                                uri: attribution.web?.uri,
                                title: attribution.web?.title,
                            }))
                            .filter(source => source.uri && source.title); 
                    }
                } else if (result.error) {
                    botText = `MMCOE API Error: **${result.error.message}** Please check your network connection.`;
                }

                // 4. Display bot response, passing the raw text and ID for TTS and translation
                displayMessage(botText, 'bot', sources, false, messageId, rawBotText);
                
            } catch (error) {
                console.error("MMCOE API Request Failed:", error);
                displayMessage("Network Error: Failed to connect to the Google service for RAG. Please check your internet connection. 🌐", 'bot');
            } finally {
                // 5. Hide loading indicator
                toggleLoading(false);
                userInput.focus();
            }
        }

        /**
         * Handles clicks on the quick reply buttons.
         */
        function quickReply(text) {
            userInput.value = text;
            sendMessage();
        }
        
        // Load external libraries (Markdown and HTML Sanitization)
        function loadScripts(urls, callback) {
            let loadedCount = 0;
            const totalCount = urls.length;

            if (totalCount === 0) {
                callback();
                return;
            }

            urls.forEach(url => {
                const script = document.createElement('script');
                script.src = url;
                script.onload = () => {
                    loadedCount++;
                    if (loadedCount === totalCount) {
                        callback();
                    }
                };
                script.onerror = () => {
                    console.error(`Failed to load script: ${url}`);
                    loadedCount++; 
                    if (loadedCount === totalCount) {
                        callback();
                    }
                };
                document.head.appendChild(script);
            });
        }

        // Initialize on window load
        window.onload = function() {
            // Start the decompilation sequence first
            setupIntroAnimation();
        };

        // Allow sending message by pressing Enter in the input box
        userInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter' && !sendButton.disabled) {
                event.preventDefault(); 
                sendMessage();
            }
        });

    </script>
